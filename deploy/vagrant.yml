---
### Setup the system
- hosts: vagrant
  user: vagrant
  sudo: true
  gather_facts: false

  vars:
    pgdata: /var/lib/pgsql/data
    install_dir: /usr/local
    home: /home/vagrant
    download_dir: $home/downloads
    db_username: java
    db_password: java
    db_name: java

    count_matching_users: psql -U postgres -tA -c "SELECT count(1) FROM pg_roles where rolname='$db_username';"
    create_user: psql -U postgres -c "CREATE ROLE $db_username WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD '$db_password';"
    count_matching_databases: psql -U postgres -tA -c "SELECT count(1) FROM pg_database WHERE datname = '$db_name';"
    create_database: psql -U postgres -c "CREATE DATABASE $db_name WITH OWNER = $db_username;"

  tasks:
  - name: "Add Fedora EPEL repository"
    action: command rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-7.noarch.rpm creates=/etc/yum.repos.d/epel.repo

  - name: "Install Dependencies"
    action: yum name=${item}
    with_items:
    - git
    - vim
    - postgresql
    - postgresql-server
    - postgresql-devel
    - java-1.7.0-openjdk.x86_64
    - java-1.7.0-openjdk-devel.x86_64
    - java-1.7.0-openjdk-javadoc.noarch
    - java-1.7.0-openjdk-src.x86_64

  - name: "Open Port 8080"
    action: shell /sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT

  - name: "Save IpTables"
    action: shell /sbin/service iptables save

  - name: Create Download directory
    action: file dest=$download_dir state=directory

    ## Setup PostgreSQL
  - name: Initialise PostgreSQL
    action: command /sbin/service postgresql initdb creates=$pgdata/pg_hba.conf

  - name: "Use our pg_hba to config PostgreSQL"
    action: copy src=vagrant_pg_hba.conf dest=$pgdata/pg_hba.conf 

  - name: Start PostgreSQL service
    action: service name=postgresql state=started

  - name: Ensure PostgreSQL is started
    action: wait_for port=5432 

  - name: "Reload Config files"
    action: shell su postgres --command="pg_ctl reload --pgdata /var/lib/pgsql/data/"

  - name: Create database user
    action: shell if [ "`$count_matching_users`" != "1" ]; then $create_user; fi

  - name: Create database
    action: shell if [ "`$count_matching_databases`" != "1" ]; then $create_database; fi

    ## Install Maven
  - name: Download Maven
    action: get_url dest=$download_dir/apache-maven-3.0.4-bin.tar.gz url=http://apache.mirror.uber.com.au/maven/maven-3/3.0.4/binaries/apache-maven-3.0.4-bin.tar.gz owner=vagrant
    ignore_errors: true

  - name: Download Maven 2nd attempt
    action: get_url dest=$download_dir/apache-maven-3.0.4-bin.tar.gz url=http://mirror.overthewire.com.au/pub/apache/maven/maven-3/3.0.4/binaries/apache-maven-3.0.4-bin.tar.gz owner=vagrant

  - name: Unzip Maven
    action: command tar xzf apache-maven-3.0.4-bin.tar.gz chdir=$download_dir creates=$download_dir/apache-maven-3.0.4

  - name: Install Maven
    action: shell install --mode=0755 -d $install_dir/apache-maven; mv apache-maven-3.0.4 $install_dir/apache-maven chdir=$download_dir creates=$install_dir/apache-maven/apache-maven-3.0.4

### Setup the user space
- hosts: vagrant
  user: vagrant
  gather_facts: false

  vars:
    maven_home: /usr/local/apache-maven/apache-maven-3.0.4 
    new_relic_key: ""
    new_relic_monitoring_mode: false
    home: /home/vagrant
    app_home: $home/project/app
    db_username: java
    db_password: java
    db_name: java

  tasks:
  - name: "Clean up home directory"
    action: command rm postinstall.sh removes=postinstall.sh

  - name: "Add .vagrant_shell into to home"
    action: template src=vagrant_shell.sh  dest=$home/.vagrant

  - name: "Add .vagrant_shell to path"
    action: lineinfile name=$home/.bashrc regexp="source \.vagrant" insertafter=EOF line="source .vagrant"

  - name: Try and prefetch App Dependencies 
    action: shell $maven_home/bin/mvn compile; $maven_home/bin/mvn clean chdir=$app_home
    ignore_errors: true

